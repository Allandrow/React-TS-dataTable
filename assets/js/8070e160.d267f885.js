"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[651],{3905:function(e,t,n){n.d(t,{Zo:function(){return d},kt:function(){return m}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},d=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),c=p(n),m=r,h=c["".concat(s,".").concat(m)]||c[m]||u[m]||i;return n?a.createElement(h,o(o({ref:t},d),{},{components:n})):a.createElement(h,o({ref:t},d))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=c;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:r,o[1]=l;for(var p=2;p<i;p++)o[p]=n[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},2257:function(e,t,n){n.r(t),n.d(t,{assets:function(){return d},contentTitle:function(){return s},default:function(){return m},frontMatter:function(){return l},metadata:function(){return p},toc:function(){return u}});var a=n(7462),r=n(3366),i=(n(7294),n(3905)),o=["components"],l={sidebar_position:2},s="Quickstart",p={unversionedId:"quickstart",id:"quickstart",title:"Quickstart",description:"Installation",source:"@site/docs/quickstart.md",sourceDirName:".",slug:"/quickstart",permalink:"/React-TS-dataTable/docs/quickstart",editUrl:"https://github.com/Allandrow/React-TS-dataTable/docs/quickstart.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Introduction",permalink:"/React-TS-dataTable/docs/intro"},next:{title:"Basic",permalink:"/React-TS-dataTable/docs/useTable/basic"}},d={},u=[{value:"Installation",id:"installation",level:2},{value:"Data setup",id:"data-setup",level:2},{value:"Hook call",id:"hook-call",level:2},{value:"Creating the table",id:"creating-the-table",level:2},{value:"Headers",id:"headers",level:3},{value:"Rows",id:"rows",level:3},{value:"Creating the pagination",id:"creating-the-pagination",level:2}],c={toc:u};function m(e){var t=e.components,n=(0,r.Z)(e,o);return(0,i.kt)("wrapper",(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"quickstart"},"Quickstart"),(0,i.kt)("h2",{id:"installation"},"Installation"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sh"},"npm i react-ts-datatable\n")),(0,i.kt)("p",null,"Or"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sh"},"yarn add react-ts-datatable\n")),(0,i.kt)("h2",{id:"data-setup"},"Data setup"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"useTable")," hook will need an array for the columns and an array for the data. Here's a setup example for both :"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Columns :")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"const columns = [\n  { id: 'firstName', displayText: 'First Name' },\n  { id: 'lastName', displayText: 'Last Name' },\n  { id: 'startDate', displayText: 'Start Date', sortMethod: 'sortDateISO' },\n  { id: 'department', displayText: 'Department' },\n  { id: 'dateOfBirth', displayText: 'Date of Birth', sortMethod: 'sortDateISO' },\n  { id: 'street', displayText: 'Street' },\n  { id: 'city', displayText: 'City', sortMethod: customStringSort },\n  { id: 'state', displayText: 'State' },\n  { id: 'zipCode', displayText: 'Zip Code' },\n]\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Data :")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"const data = [\n  {\n    key: '0224353f-726b-497f-9e46-97dfd516d673',\n    firstName: 'Bernie',\n    lastName: 'Swindin',\n    department: 'Services',\n    dateOfBirth: '03/10/1988',\n    startDate: '08/18/2018',\n    street: '6 Schiller Drive',\n    city: 'Memphis',\n    state: 'TN',\n    zipCode: '38143',\n  },\n  {\n    key: 'e092e395-2637-4bbc-b7bd-a8668f53b288',\n    firstName: 'Jo',\n    lastName: 'Barnsley',\n    department: 'Legal',\n    dateOfBirth: '11/23/1982',\n    startDate: '05/09/2020',\n    street: '7 Warner Way',\n    city: 'Fort Worth',\n    state: 'TX',\n    zipCode: '76147',\n  },\n]\n")),(0,i.kt)("h2",{id:"hook-call"},"Hook call"),(0,i.kt)("p",null,"Once your data is setup simply import the hook from react-ts-datatable, call it with your columns and data and destructure the returned object."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"import { useTable } from 'react-ts-datatable'\n\nconst {\n  headers,\n  rows,\n  pagination,\n  summary,\n  isFiltered,\n  handleSorting,\n  handlePageSizing,\n  handleFiltering,\n  handlePageChange,\n} = useTable({ columns, data })\n")),(0,i.kt)("h2",{id:"creating-the-table"},"Creating the table"),(0,i.kt)("h3",{id:"headers"},"Headers"),(0,i.kt)("p",null,"You can simply iterate over each item in the ",(0,i.kt)("inlineCode",{parentName:"p"},"headings")," array and use the ",(0,i.kt)("inlineCode",{parentName:"p"},"id")," for the key, displayText for the text content. If you care about sorting, you can also destructure ",(0,i.kt)("inlineCode",{parentName:"p"},"isSorted")," (boolean) and ",(0,i.kt)("inlineCode",{parentName:"p"},"sortingDirection")," (string) the column is sorted."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx"},"<thead>\n  <tr>\n    {headers.map(({ id, displayText }) => (\n      <th key={id}>{displayText}</th>\n    ))}\n  </tr>\n</thead>\n")),(0,i.kt)("h3",{id:"rows"},"Rows"),(0,i.kt)("p",null,"Iterate over your ",(0,i.kt)("inlineCode",{parentName:"p"},"rows")," array, using its ",(0,i.kt)("inlineCode",{parentName:"p"},"key")," for the required key and ",(0,i.kt)("inlineCode",{parentName:"p"},"data")," to iterate over each value in the row."),(0,i.kt)("p",null,"For the row iteration, simply destructure the ",(0,i.kt)("inlineCode",{parentName:"p"},"key")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"cellValue"),". If you care about sorting, you can also destructure ",(0,i.kt)("inlineCode",{parentName:"p"},"isSorted")," (boolean) in the row."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx"},"<tbody>\n  {rows.map(({ data, key }) => (\n    <tr key={key}>\n      {data.map(({ cellValue, key }) => (\n        <td key={key}>{cellValue}</td>\n      ))}\n    </tr>\n  ))}\n</tbody>\n")),(0,i.kt)("h2",{id:"creating-the-pagination"},"Creating the pagination"),(0,i.kt)("p",null,"Given the pagination bare values provided, it is recommended to use the ",(0,i.kt)("inlineCode",{parentName:"p"},"paginationWithSuspend")," helper function to render a more complete component unless you have other pre-requisites and this example will show how to use the helper function."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx"},"<>\n  {suspendBeforeList && (\n    <>\n      <li key={firstPage}>\n        <button onClick={() => handlePageChange(firstPage)}>{firstPage}</button>\n      </li>\n      <li key={'suspendedBeforeList'}>\n        <span>\u2026</span>\n      </li>\n    </>\n  )}\n\n  {pageList.length > 0 &&\n    pageList.map((pageNumber) => (\n      <li key={pageNumber}>\n        <button onClick={() => handlePageChange(page)}>{page}</button>\n      </li>\n    ))}\n\n  {suspendAfterList && (\n    <>\n      <li key={'suspendedAfterList'}>\n        <span>\u2026</span>\n      </li>\n      <li key={lastPage}>\n        <button onClick={() => handlePageChange(lastPage)}>{lastPage}</button>\n      </li>\n    </>\n  )}\n</>\n")))}m.isMDXComponent=!0}}]);